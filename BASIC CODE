

import pandas as pd
import nltk
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
import joblib
nltk.download('stopwords')


df = pd.read_csv('/content/drive/MyDrive/datasets/Restaurant_Reviews.tsv', delimiter='\t')


df.head()



df.shape

df.info()

df.describe()



corpus = []

for i in range(0, 1000):

    review = re.sub(pattern='[^a-zA-Z]', repl=' ', string=df['Review'][i])

    review = review.lower()

    review_words = review.split()

    review_words = [word for word in review_words if not word in set(
        stopwords.words('english'))]

    ps = PorterStemmer()
    review = [ps.stem(word) for word in review_words]

    review = ' '.join(review)

    corpus.append(review)

cv = CountVectorizer(max_features=1500)
X = cv.fit_transform(corpus).toarray()
y = df.iloc[:, 1].values

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.20, random_state=0)

classifier = MultinomialNB(alpha=0.2)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_pred)
print(accuracy)



def predict_sentiment(sample_review):
    sample_review = re.sub(pattern='[^a-zA-Z]', repl=' ', string=sample_review)
    sample_review = sample_review.lower()
    sample_review_words = sample_review.split()
    full_words = sample_review_words
    sample_review_words = [word for word in sample_review_words if not word in set(stopwords.words('english'))]

    ps = PorterStemmer()
    final_review = [ps.stem(word) for word in sample_review_words]
    final_review = ' '.join(final_review)

    temp = cv.transform([final_review]).toarray()

    if 'not' in full_words:
         return 1 if classifier.predict(temp) == 0 else 0

    return classifier.predict(temp)

sample_review = 'Food was pretty bad and the service was very slow.'

if predict_sentiment(sample_review):
  print('This is a POSITIVE review.')
else:
  print('This is a NEGATIVE review!')

sample_review = 'The food is really good here.'

if predict_sentiment(sample_review):
  print('This is a POSITIVE review.')
else:
  print('This is a NEGATIVE review!')

sample_review = 'the food is not bad'

if predict_sentiment(sample_review):
  print('This is a POSITIVE review.')
else:
  print('This is a NEGATIVE review!')
